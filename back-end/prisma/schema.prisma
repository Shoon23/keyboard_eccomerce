// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  userId String @id @default(cuid())
  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  createdAt DateTime @default(now())
  reviews ProductReviews[]
  cartId Cart?
  favoritesId Favorites?
}


model Favorites {
  favotiresId String @id @default(cuid())
  favoriteItems FavoriteItem[]
  user User @relation(fields: [userId],references: [userId])
  userId String @unique
}

model FavoriteItem {
  favoriteItemId String @id @default(cuid())
  favorites Favorites @relation(fields: [favoritesId],references: [favotiresId])
  favoritesId String
  product Product @relation(fields: [productId],references: [productId])
  productId String
}

model Cart {
  cartId String @id @default(cuid())
  cartItems CartItem[]
  user User @relation(fields: [userId],references: [userId])
  userId String @unique

}

model CartItem {
  cartItemId String @id @default(cuid())
  cart Cart @relation(fields: [cartId],references: [cartId])
  cartId String
  quantity Int @db.Int
  product Product? @relation(fields: [productId],references: [productId])
  productId String?
}

model Product {
  productId String @id @default(cuid())
  productName String @db.VarChar(255)
  productPrice Int @db.Int()
  productStock Int @db.Int()
  productDescription String @db.LongText()
  reviews ProductReviews[]
  cartItem CartItem[]
  productImg ProductImg[]
  favoriteItems FavoriteItem[]
}

model ProductImg {
  productImgId String @id @default(cuid())
  product Product @relation(fields: [productId],references: [productId])
  productId String
  imgUrl String @db.LongText
}

model ProductReviews {
  reviewId String @id @default(cuid())
  reviewDescription String @db.LongText()
  reviewStar Int @db.SmallInt()
  user User @relation(fields: [userId],references: [userId])
  userId String
  product Product @relation(fields: [productId],references: [productId])
  productId String
}